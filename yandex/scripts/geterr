#!/bin/bash

SSH="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -o ConnectTimeout=60"
TAG="$1"
[ -z "$TAG" ] && TAG="+ASEARCH"
STAT="$2"
[ -z "$STAT" ] && STAT="porto_stat[errors]"
WORKERS=1

geterrors() {
	sky run -t 60 --separate -p -U "portoctl dget / $STAT" $TAG
}

parse() {
	local state=0
	local host=""
	local nr=1
	local line=""
	while read line; do
		if [ "$line" = "================================================================================" ]; then
			[ $state -eq 0 ] && state=1
		elif [ "$line" = "--------------------------------------------------------------------------------" ]; then
			state=2
		elif [ -z "$line" ]; then
			state=0
		else
			if [ $state -eq 1 ]; then
				host=$(echo "$line" | cut -d ':' -f '2-' | tr -d " ")
			elif [ $state -eq 2 ]; then
				[ "$line" != "0" ] && echo "$host $line"
			fi
		fi

		nr=$(($nr + 1))
	done
}

LOCK=$(mktemp)
cleanup() { wait; rm -f $LOCK; }
trap cleanup EXIT

getlog() {
	host=$(echo "$1" | cut -d ' ' -f1)

	echo "$line"
	local title="@@@ $host"
	local version="$($SSH $host portoctl -v 2>&1)"
	local log="$($SSH $host zgrep \"$3\" '/var/log/portod.log*')"

	echo -e "$line\n$version\n$log\n\n" | flock $LOCK -c "bash -c 'cat >> $2'"
}

echo "Get errors on all $TAG hosts"
geterrors > result.txt
echo "Filter only hosts that have $STAT"
cat result.txt | parse | sort -r -n -k2 > result2.txt

GREP=""
[ "$STAT" = "porto_stat[errors]" ] && GREP="ERR "
[ "$STAT" = "porto_stat[warnings]" ] && GREP="WRN "
[ "$STAT" = "porto_stat[restore_failed]" ] && GREP="t restore container"

if [ ! -z "$GREP" ]; then
	echo "Get error details"

	echo >result3.txt
	running=0
	while read -u 100 line; do
		if [ $running -ge $WORKERS ]; then
			[ $WORKERS -eq 1 ] && wait || wait -n
			running=$(($running - 1))
		fi

		getlog "$line" result3.txt "$GREP" &

		running=$(($running + 1))
	done 100< result2.txt
fi
wait
